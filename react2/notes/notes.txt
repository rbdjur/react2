1.  requiring an entire folder must include "index.js" to be the default file. 

cannot require folder entirely unless there is an index.js.
- instead just require the specific file you want inside that folder.
- If doing it this way, must make a "index.js" file and inside the file: 

"

    module.exports = {
        (the variable you want to export)
    }

2. Requiring and naming order
Must: 

"
const express = require("express");
const app = express();

"

require express and define it in a variable before you can use "const app = express();"
- If not an error will appear stating "express();" is not defined. 

3. Deprecated Warning 

mongoose.connect(MONGODB_URI, { useNewUrlParser: true });

The:
"
{ useNewUrlParser: true });

                            "

is the new code to be used because the old code is depcrecated.

4. Express error 
In Routes.js,  I assigned express() into two variables because I was mistakened thinking that React-Router and Express-Router serve the same purpose. 

    1. const app = express()
    2. const router = require("express").Router()

However, React-Router is strictly for the front end and Express-Router is strictly for the backend. 

5. Run mongo reminder 
    This a note to myself that whenever using MERN, in this situation MongoDb, to run "mongod" in terminal, open a new window, and type in "mongo" to access the mongo database. 

    But most importantly, this runs the mongo databse on your computer.

6.  Inside of the /get route 
Once I got the database get route to work via console.logs that notified me that the code inside the function worked.  

however, the variables "title, date, url" were undefined when console logged.  

in order to define the given variables with the right values, I added "result.title, result.date, result.url" to assign these variables as keys to the "const result" object.  







inner package json (inside client)= front end code 

outter package json = backend code 





